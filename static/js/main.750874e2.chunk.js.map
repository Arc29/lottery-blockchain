{"version":3,"sources":["web3.js","lottery.js","App.js","serviceWorker.js","index.js"],"names":["web3","Web3","window","currentProvider","address","lotteryData","abi","eth","Contract","JSON","parse","App","state","manager","players","balance","value","lastWinner","updateParams","a","async","lottery","methods","getPlayers","call","getBalance","options","setState","onSubmit","event","preventDefault","getAccounts","accounts","message","enter","send","from","utils","toWei","onClick","pickWinner","this","addEventListener","ethereum","enable","console","log","className","length","fromWei","onChange","target","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6cAIeA,EAFJ,IAAIC,IAAKC,OAAOF,KAAKG,iB,QCAzBC,EAAaC,EAAbD,QAAQE,EAAKD,EAALC,IAEA,MAAIN,EAAKO,IAAIC,SAASC,KAAKC,MAAMJ,GAAKF,GCgGtCO,E,2MA5FfC,MAAM,CACJC,QAAQ,GACRC,QAAQ,GACRC,QAAQ,GACRC,MAAM,GACNC,WAAW,I,EAEbC,aAAe,8BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACOE,EAAQC,QAAQC,aAAaC,QADpC,cACPV,EADO,kBAAAK,EAAA,MAEOnB,EAAKO,IAAIkB,WAAWJ,EAAQK,QAAQtB,UAF3C,cAEPW,EAFO,kBAAAI,EAAA,MAGUE,EAAQC,QAAQL,aAAaO,QAHvC,OAGPP,EAHO,OAIb,EAAKU,SAAS,CAACb,UAAQC,UAAQE,eAJlB,uC,EAcfW,SAAW,SAAMC,GAAN,eAAAV,EAAAC,OAAA,uDACTS,EAAMC,iBADG,WAAAX,EAAA,MAGYnB,EAAKO,IAAIwB,eAHrB,cAGHC,EAHG,OAKT,EAAKL,SAAS,CAACM,QAAQ,0CALd,WAAAd,EAAA,MAMHE,EAAQC,QAAQY,QAAQC,KAAK,CACjCC,KAAKJ,EAAS,GACdhB,MAAMhB,EAAKqC,MAAMC,MAAM,EAAK1B,MAAMI,MAAM,YARjC,OAUT,EAAKW,SAAS,CAACM,QAAQ,wCACvB,EAAKf,eAXI,sC,EAcXqB,QAAU,SAAMV,GAAN,eAAAV,EAAAC,OAAA,kEAAAD,EAAA,MAEanB,EAAKO,IAAIwB,eAFtB,cAEFC,EAFE,OAIR,EAAKL,SAAS,CAACM,QAAQ,0CAJf,WAAAd,EAAA,MAKFE,EAAQC,QAAQkB,aAAaL,KAAK,CACtCC,KAAKJ,EAAS,MANR,OAQR,EAAKL,SAAS,CAACM,QAAQ,gCACvB,EAAKf,eATG,sC,qLApBYG,EAAQC,QAAQT,UAAUW,Q,OAAxCX,E,OAEN4B,KAAKd,SAAS,CAACd,YACf4B,KAAKvB,e,gFA6BI,IAAD,OAiBV,OAhBEhB,OAAOwC,iBAAiB,QAAQ,oBAAAvB,EAAAC,OAAA,oDAE1BlB,OAAOyC,SAFmB,wBAG1BzC,OAAOF,KAAO,IAAIC,IAAKC,OAAOyC,UAHJ,oBAAAxB,EAAA,MAMhBjB,OAAOyC,SAASC,UANA,uDAUtBC,QAAQC,IAAI,sBAVU,2DAkBhC,yBAAKC,UAAU,OACf,gDACA,0DAAgCN,KAAK7B,MAAMC,QAA3C,IACG,6BADH,aACmB4B,KAAK7B,MAAME,QAAQkC,OADtC,2CACsFhD,EAAKqC,MAAMY,QAAQR,KAAK7B,MAAMG,QAAQ,SAD5H,UAEG,6BAFH,uBAE6B0B,KAAK7B,MAAMK,YAExC,6BACA,8CACA,0BAAMW,SAAUa,KAAKb,UACrB,mDACA,2BACAZ,MAAOyB,KAAK7B,MAAMI,MAClBkC,SAAU,SAAArB,GAAQ,EAAKF,SAAS,CAACX,MAAMa,EAAMsB,OAAOnC,WAEpD,0CAEA,6BACA,uDACA,4BAAQuB,QAASE,KAAKF,SAAtB,iBACA,6BACA,6BAAME,KAAK7B,MAAMqB,a,GAvFDmB,aCKEC,QACW,cAA7BnD,OAAOoD,SAASC,UAEe,UAA7BrD,OAAOoD,SAASC,UAEhBrD,OAAOoD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.750874e2.chunk.js","sourcesContent":["import Web3 from 'web3';\n\nconst web3=new Web3(window.web3.currentProvider)\n\nexport default web3;","import web3 from './web3';\nimport lotteryData from './deployInfo.json'\nconst {address,abi}=lotteryData;\n\nexport default new web3.eth.Contract(JSON.parse(abi),address);","import React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3'\nimport web3 from './web3'\nimport lottery from './lottery'\n\n\nclass App extends Component{\nstate={\n  manager:'',\n  players:[],\n  balance:'',\n  value:'',\n  lastWinner:''\n}\nupdateParams = async() =>{\n  const players=await lottery.methods.getPlayers().call();\n  const balance=await web3.eth.getBalance(lottery.options.address)\n  const lastWinner=await lottery.methods.lastWinner().call();\n  this.setState({players,balance,lastWinner})\n}\n\nasync componentDidMount(){\n  const manager=await lottery.methods.manager().call();\n  \n  this.setState({manager});\n  this.updateParams();\n}\n\nonSubmit = async(event) =>{\n  event.preventDefault()\n\n  const accounts=await web3.eth.getAccounts();\n\n  this.setState({message:'Waiting for transaction to process...'})\n  await lottery.methods.enter().send({\n    from:accounts[0],\n    value:web3.utils.toWei(this.state.value,'ether')\n  })\n  this.setState({message:'Transaction completed successfully!'})\n  this.updateParams();\n}\n\nonClick = async(event) =>{\n\n  const accounts=await web3.eth.getAccounts();\n\n  this.setState({message:'Waiting for transaction to process...'})\n  await lottery.methods.pickWinner().send({\n    from:accounts[0]\n  })\n  this.setState({message:'A winner has been selected!'})\n  this.updateParams();\n}\n\n  render(){\n  window.addEventListener('load', async () => {\n    // Modern dapp browsers...\n    if (window.ethereum) {\n        window.web3 = new Web3(window.ethereum);\n        try {\n            // Request account access if needed\n            await window.ethereum.enable();\n            // Acccounts now exposed\n            \n        } catch (error) {\n            console.log(\"Permission denied!\")\n            \n        }\n    }\n    \n});\nreturn (\n    \n  <div className=\"App\">\n  <h2>Lottery Contract</h2>\n  <p>This contract is managed by {this.state.manager}. \n     <br/>Currently {this.state.players.length} players have entered and prize pool is {web3.utils.fromWei(this.state.balance,'ether')} ether.\n     <br/>The last winner was {this.state.lastWinner}\n  </p>\n  <hr/>\n  <h4>Try your luck!</h4>\n  <form onSubmit={this.onSubmit}>\n  <label>Amount to enter:</label>\n  <input\n  value={this.state.value}\n  onChange={event=>{this.setState({value:event.target.value})}}\n  />\n  <button>Enter</button>\n  </form>\n  <hr/>\n  <h4>Ready to pick a winner?</h4>\n  <button onClick={this.onClick}>Pick a winner</button>\n  <hr/>\n  <br/>{this.state.message}\n  </div>\n); \n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}